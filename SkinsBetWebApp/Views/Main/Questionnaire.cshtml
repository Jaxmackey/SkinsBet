<div style="">
  <div class="col-md-4">
    <label for="validationCustom01" class="form-label">Никнейм youtube (как в чате)</label>
    <input type="text" class="form-control" id="validationCustom01" value="" required>
    <div id="coolLoginYoutube" style="display: none; color: #1e7e34">
      Выглядит отлично!
    </div>
    <div id="wrongLoginYoutube" style="display: none; color: red">
      Не может быть пустым
      </div>
  </div>
  <div class="col-md-4">
    <label for="validationCustom02" class="form-label">Никнейм steam</label>
    <input type="text" class="form-control" id="validationCustom02" value="" required>
     <div id="coolLoginSteam" style="display: none; color: #1e7e34">
          Выглядит отлично!
        </div>
        <div id="wrongLoginSteam" style="display: none; color: red">
          Не может быть пустым
          </div>
  </div>
  <div class="col-md-4">
    <label for="validationCustomUsername" class="form-label">Email (должен быть валидный - будет отсылаться сообщеине с кодом.)</label>
    <input type="text" class="form-control" id="validationCustomUsername" required>
    <div id="coolEmail" style="display: none; color: #1e7e34">
      Выглядит отлично!
    </div>
    <div id="wrongEmail" style="display: none; color: red">
      Не может быть пустым
    </div>
  </div>
  
  <div class="col-md-4">
    <button class="btn btn-primary" onclick="playInLotto()">Участвовать в розыгрыше.</button>
  </div>
  <div style="padding-top: 15px; display: none;" id="secret" class="col-md-4">
    <p style="color: #1e7e34">Письмо на указаный email отправлено. (Письмо может попасть в "Спам". Проверьте папку "Спам")</p>
    <label for="secret_input" class="form-label">Введите полученый код.</label>
    <input type="text" class="form-control" id="secret_input" required>
    <button class="btn btn-primary" onclick="endAuth()">Отправить</button>
  </div>
    <div class="col-md-4">
        <h2>Участники:</h2>
        <div style="padding-top: 20px;" id="players">
        </div>
    </div>
</div>
<script type="application/javascript">
getPlayers().then(data => {
  makerTablePlayers(data);
});
function makerTablePlayers(data)
{
  removeAllChildNodes(document.getElementById("players"));
    for (step = 0; step < data.length; step++) {
      const newElem = document.createElement("div");
      newElem.setAttribute("class", "row");
      newElem.innerText = data[step].loginYoutube
      document.getElementById("players").appendChild(newElem)
    }
}
function removeAllChildNodes(parent) {
    while (parent.firstChild) {
        parent.removeChild(parent.firstChild);
    }
}
function playInLotto()
{
  debugger;
  let inputLoginYoutube = document.getElementById('validationCustom01');
  let inputLoginSteam = document.getElementById('validationCustom02');
  let inputEmail = document.getElementById('validationCustomUsername');
  let validate = true;
  if (inputLoginYoutube.value === '')
  {
    document.getElementById('coolLoginYoutube').style.display = 'none';
    document.getElementById('wrongLoginYoutube').style.display = null;
    validate = false;
  }
  else
  {
    document.getElementById('wrongLoginYoutube').style.display = 'none';
    document.getElementById('coolLoginYoutube').style.display = null;
  }
  debugger;
  if(inputLoginSteam.value === '')
  {
     document.getElementById('coolLoginSteam').style.display = 'none';
        document.getElementById('wrongLoginSteam').style.display = null;
        validate = false;
  }
  else 
  {
      document.getElementById('wrongLoginSteam').style.display = 'none';
          document.getElementById('coolLoginSteam').style.display = null;
  }
  if (inputEmail.value === '')
  {
     document.getElementById('coolEmail').style.display = 'none';
            document.getElementById('wrongEmail').style.display = null;
            validate = false;
  }
  else
  {
    document.getElementById('wrongEmail').style.display = 'none';
              document.getElementById('coolEmail').style.display = null;
  }
  if (validate)
  {
    localStorage.setItem("q", JSON.stringify({loginYoutube : document.getElementById('validationCustom01').value, loginSteam : document.getElementById('validationCustom02').value, email : document.getElementById('validationCustomUsername').value}));
    sendEmail(inputEmail.value).then((data)=>
    {
      localStorage.setItem("k", JSON.stringify({"key": data}));
      document.getElementById('secret').style.display = null;
    }).catch((ex)=> {console.log(ex)});
  }
}

async function sendEmail(email)
{
  const rawResponse = await fetch('/Betting/Authification?email=' + email, 
                                    {
                                      method: 'GET',
                                      headers: {
                                        'Accept': 'application/json',
                                        'Content-type': 'application/json'
                                      }
                                    });
                                    return await rawResponse.json();
}

function endAuth()
{
  debugger;
  document.getElementById('secret').style.display = "none";
  let key = JSON.parse(localStorage.getItem('k')).key
  let secretInput = document.getElementById('secret_input').value;
  if(secretInput === key)
  {
    insertInfo().then((data => {
      getPlayers().then((d)=>{
        makerTablePlayers(d)
      });
    }))
  }
}

async function insertInfo()
{
    debugger;
    const rawResponse = await fetch('/Betting/InsertInfo', 
                                  {
                                    method: 'POST',
                                    headers: {
                                      'Accept': 'application/json',
                                      'Content-type': 'application/json'
                                    },
                                    body: JSON.stringify(JSON.parse(localStorage.getItem("q"))),
                                  });
                                  return await rawResponse.json();
}
function changeInsertText(status)
{
    debugger;
    document.getElementById('StatusInsert').textContent = status;
}
async function getPlayers()
{
  debugger;
      const rawResponse = await fetch('/Betting/GetPlayers', 
                                    {
                                      method: 'GET',
                                      headers: {
                                        'Accept': 'application/json',
                                        'Content-type': 'application/json'
                                      }
                                    });
                                    return await rawResponse.json();
}
</script>