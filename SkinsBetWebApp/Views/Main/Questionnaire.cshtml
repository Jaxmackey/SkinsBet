<div style="">
<form class="row g-3 needs-validation" novalidate>
  <div class="col-md-4">
    <label for="validationCustom01" class="form-label">Никнейм youtube (как в чате)</label>
    <input type="text" class="form-control" id="validationCustom01" value="" required>
    <div class="valid-feedback">
      Выглядит отлично!
    </div>
  </div>
  <div class="col-md-4">
    <label for="validationCustom02" class="form-label">Никнейм steam</label>
    <input type="text" class="form-control" id="validationCustom02" value="" required>
    <div class="valid-feedback">
      Выглядит отлично!
    </div>
  </div>
  <div class="col-md-4">
    <label for="validationCustomUsername" class="form-label">Email (должен быть валидный - возможно будет отсылаться сообщеине с кодом)</label>
    <div class="input-group has-validation">
      <input type="text" class="form-control" id="validationCustomUsername" aria-describedby="inputGroupPrepend" required>
      <div class="invalid-feedback">
        Пожалуйсто заполните поле email.
      </div>
    </div>
  </div>
  <div class="col-12">
    <button class="btn btn-primary" type="submit">Участвовать в розыгрыше.</button>
  </div>
</form>
  <div id="StatusInsert"></div>
  <div style="padding-top: 20px;" id="players">
    <h2>Участники:</h2>
  </div>
</div>
<script type="application/javascript">
getPlayers().then(data => {
  debugger;
  for (step = 0; step < data.length; step++) {
    const newElem = document.createElement("div");
    newElem.setAttribute("class", "row");
    newElem.innerText = data[step].loginYoutube
    document.getElementById("players").appendChild(newElem)
  }
});
(function () {
  'use strict'
  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  var forms = document.querySelectorAll('.needs-validation')

  // Loop over them and prevent submission
  Array.prototype.slice.call(forms)
    .forEach(function (form) {
      form.addEventListener('submit', function (event) {
          debugger;
        if (!form.checkValidity()) {
          event.preventDefault()
          event.stopPropagation()
        }
        else
        {
            insertInfo().then(data => 
            {
                changeInsertText(data);
            });
        }

        form.classList.add('was-validated')
      }, false)
    })
})()
async function insertInfo()
{
    debugger;
    const rawResponse = await fetch('/Betting/InsertInfo', 
                                  {
                                    method: 'POST',
                                    headers: {
                                      'Accept': 'application/json',
                                      'Content-type': 'application/json'
                                    },
                                    body: JSON.stringify({loginYoutube : document.getElementById('validationCustom01').value, loginSteam : document.getElementById('validationCustom02').value, email : document.getElementById('validationCustomUsername').value}),
                                  });
                                  return await rawResponse.json();
}
function changeInsertText(status)
{
    debugger;
    document.getElementById('StatusInsert').textContent = status;
}
async function getPlayers()
{
  debugger;
      const rawResponse = await fetch('/Betting/GetPlayers', 
                                    {
                                      method: 'GET',
                                      headers: {
                                        'Accept': 'application/json',
                                        'Content-type': 'application/json'
                                      }
                                    });
                                    return await rawResponse.json();
}
</script>